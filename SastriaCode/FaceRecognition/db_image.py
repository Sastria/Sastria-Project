

import os
import sys
import cv2
import cv
import numpy as np
import shutil
from ratio2 import *
from isa_resource import Video, get_bb2
sys.path.append("facerec-master/py/apps/videofacerec")
sys.path.append("facerec-master/py/facerec")
sys.path.append("facerec-master/py")

from videofacerec import *
from make_training_db import DBManager
def normalize(X, low, high, dtype=None):
	"""Normalizes a given array in X to a value between low and high."""
	X = np.asarray(X)
	minX, maxX = np.min(X), np.max(X)
	# normalize to [0...1].
	X = X - float(minX)
	X = X / float((maxX - minX))
	# scale to [low...high].
	X = X * (high-low)
	X = X + low
	if dtype is None:
		return np.asarray(X)
	return np.asarray(X, dtype=dtype)
def read_images_canny(path, sz=None):

	c = 0
	X,y = [], []
	for dirname, dirnames, filenames in os.walk(path):
		for subdirname in dirnames:
			subject_path = os.path.join(dirname, subdirname)
			for filename in os.listdir(subject_path):
				try:
					gray = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)
					img = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)
#                    ## canny
					detected_edges = cv2.GaussianBlur(gray,(1,1),5)
					detected_edges = cv2.Canny(detected_edges,lowThreshold,lowThreshold*ratio,apertureSize = kernel_size)
					im = cv2.bitwise_and(img,img,mask = detected_edges)

					# resize to given size (if given)
					if (sz is not None):
						im = cv2.resize(im, sz)
					cv.EqualizeHist( cv.fromarray(im) , cv.fromarray(im))    
					X.append(np.asarray(im, dtype=np.uint8))
					y.append(c)
					labels[c]=str(os.path.join(subject_path, filename))
				except IOError, (errno, strerror):
					print "I/O error({0}): {1}".format(errno, strerror)
				except:
					print "Unexpected error:", sys.exc_info()[0]
					raise
			c = c+1
	return [X,y]

def read_1_image_canny(path, sz=None):
	X,y = [], []
	try:
		gray = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)
		img = cv2.imread(os.path.join(subject_path, filename))
		## canny
		detected_edges = cv2.GaussianBlur(gray,(1,1),5)
		detected_edges = cv2.Canny(detected_edges,lowThreshold,lowThreshold*ratio,apertureSize = kernel_size)
		im = cv2.bitwise_and(img,img,mask = detected_edges)

		# resize to given size (if given)
		if (sz is not None):
			im = cv2.resize(im, sz)
		#cv.EqualizeHist( cv.fromarray(im) , cv.fromarray(im))    
		X.append(np.asarray(im, dtype=np.uint8))
		y.append(c)
		labels[c]=str(os.path.join(subject_path, filename))+"//"+str(c)
		# resize to given size (if given)
		if (sz is not None):
			im = cv2.resize(im, sz)
		cv.EqualizeHist( cv.fromarray(im) , cv.fromarray(im))    
		X.append(np.asarray(im, dtype=np.uint8))
		y.append(777)
	except IOError, (errno, strerror):
		print "I/O error({0}): {1}".format(errno, strerror)
	except:
		print "Unexpected error:", sys.exc_info()[0]
		raise
	return [X,y]
def read_images(path, sz=None):
	c = 0
	X,y = [], []
	for dirname, dirnames, filenames in os.walk(path):
		for subdirname in dirnames:
			subject_path = os.path.join(dirname, subdirname)
			for filename in os.listdir(subject_path):
				try:
					im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)
					# resize to given size (if given)
					if (sz is not None):
						im = cv2.resize(im, sz)
					cv.EqualizeHist( cv.fromarray(im) , cv.fromarray(im))        
					X.append(np.asarray(im, dtype=np.uint8))
					y.append(c)
					labels[c]=str(os.path.join(subject_path, filename))+"//"+str(c)
				except IOError, (errno, strerror):
					print "I/O error({0}): {1}".format(errno, strerror)
				except:
					print "Unexpected error:", sys.exc_info()[0]
					raise
			c = c+1
	return [X,y]

def read_1_image(path, sz=None):
	X,y = [], []
	try:
		im = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
		# resize to given size (if given)
		if (sz is not None):
			im = cv2.resize(im, sz)
		cv.EqualizeHist( cv.fromarray(im) , cv.fromarray(im))    
		X.append(np.asarray(im, dtype=np.uint8))
		y.append(777)
	except IOError, (errno, strerror):
		print "I/O error({0}): {1}".format(errno, strerror)
	except:
		print "Unexpected error:", sys.exc_info()[0]
		raise
	return [X,y]

def resplit():
	print "start resplit"
	base_directory_rs="/home/felix/Pictures/multi_image/"
	labels={}
	out_dir = None
	all_image = os.listdir(base_directory+"db/s1")

	for img_name in all_image:
#        try:
		print "img_name ",  img_name  
		min_val=1000
		if not os.path.exists(base_directory+"/resplit/s1"):
			os.makedirs(base_directory+"/resplit/s1") 
			#print " creo directory" 
		#sposto questa immagine e la uso come db
		shutil.move(base_directory+"db/s1/"+img_name, base_directory+"/resplit/s1")

		for i in range(10):

			[X,y] = read_images(   base_directory+"/resplit/", (92,112))
			model = cv2.createLBPHFaceRecognizer()
			model.train(np.asarray(X), np.asarray(y))        
			#model.load(base_directory+"model")      
			font = cv.InitFont(cv.CV_FONT_HERSHEY_SIMPLEX, 1,1,0,3,8)

			other_image = os.listdir(base_directory+"db/s1")
			#print "other_image ",  other_image
			if i==0:
				val_min=[1000]
			for other_i in  other_image :
				#print "read_1_image ",  base_directory+"/mix_image/"+other_i
				[X2,y2] = read_1_image(base_directory+"/db/s1/"+other_i, (92,112))        
				[p_label2, p_confidence2] = model.predict(np.asarray(X2[0]))
				#print  "image ",  labels[p_label2], " confidence ",str(p_confidence2) 
				#print "------------------",   i
				if i==0:
					if val_min[0]>p_confidence2:
						val_min.remove(val_min[0])
						val_min.append(p_confidence2)
						val_min.sort()
						min_val =val_min[0]
						print " minore quindi appendo ",  p_confidence2
					print val_min                                                                                                            

				if i >0:
					#print base_directory+"/mix_image/"+other_i,  "  ",  p_confidence2      
#                      try:
					if  p_confidence2 < min_val+1 :
						#shutil.copy(base_directory+"/mix_image/"+other_i, base_directory+"/db/s1")
						shutil.move(base_directory+"/db/s1/"+other_i, base_directory+"/resplit/s1")
						#print " move image ",base_directory+"/mix_image/"+other_i  
						try:
							all_image.remove(other_i)
						except:
							pass
#                      except:
#                        print " shutil move ",base_directory+"/mix_image/"+other_i    

		rec_image = os.listdir(base_directory+"/resplit/s1")
		print "-----------------rec_image ",  rec_image
		if len(rec_image)>=2 :
			print " COPIOOOOOOOO ",base_directory+"/db/s1/"+rec_image[0]  
			shutil.copy(base_directory+"/resplit/s1/"+rec_image[0], base_directory+"/rec_image/")
		for img in rec_image:
			shutil.move(base_directory+"/resplit/s1/"+img,base_directory+"/tmp" )
#              else:
#                  for f in rec_image :
#                                          shutil.copy(base_directory+"/db/s1/"+f, base_directory+"/mix_image/")

		shutil.rmtree(base_directory+"resplit/s1")    
	print "---------------------------------"
	print "========FINE   RESPLIT ======================"





if __name__ == "__main__":

######## 
	print "-------------- START --------------"
	user = str(os.environ["USER"])
	dir_base_fr="/Users/labcontenuti/Documents/FaceRecognition/new_resource"
	dataset_fn=dir_base_fr+"/att_faces"
	dir_image =dir_base_fr+"/att_test" 
	video_src = "/Users/labcontenuti/Documents/workspace/Video/"+"videodemo.mov"
	base_dataset_fn =dir_base_fr+"/att_test/"
	db_image =dir_base_fr+"/att_faces/" 
	xml_of_video=""
	training="/att_faces"	
	dir_demo_base="/Users/labcontenuti/Documents/Demo/"
	video_src = "/Users/labcontenuti/Documents/workspace/Video/"+"videodemo.mov"
	try:
		msg=" ---: python db_image.py <nome video>"
		print "sys.argv ", sys.argv
		if len(sys.argv)==2:
			video = dir_demo_base+"video/"+str(sys.argv[1])
			xml_of_video=dir_demo_base+"Data/"+"faceList"+str(sys.argv[1])+".xml"
			video_src=dir_demo_base+"Video/"+str(sys.argv[1])
			print "video: ", video
			print "xml video ", xml_of_video
		"""	
		if len(sys.argv)==3:
			video = dir_demo_base+"video/"+str(sys.argv[1])
			xml_of_video=dir_demo_base+"Data/"+"faceList"+str(sys.argv[1])+".xml"
			video_src=dir_demo_base+"Video/"+str(sys.argv[1])
			training="/db_image/"
			print "video: ", video
			print "xml video ", xml_of_video	
		"""        
		#else: 
		#	print msg
		#	exit()

	except  Exception as er:
		print " error ",  er	
		print msg
		exit()
	## ottengo una istanza di video
	video_info =None
	try:
		video_info = Video()
		print " xml of video ", xml_of_video
		video_info  =get_bb2(xml_of_video)
		print " tracce del video ",  len(video_info._track_list )
	except getopt.error, msg:
		print msg
		print " usage: file_conf.xml"

	#all_prediction={99.0011: ['18', '4'], 111.0009: ['14', '24'], 70.0005: ['4', '22'], 92.0007: ['8', '29'], 12.0: ['12', '12'], 13.0: ['11', '11'], 15.0: ['7', '7'], 131.0001: ['29', '27'], 18.0: ['22', '22'], 19.0: ['3', '3'], 107.0006: ['2', '20'], 83.0014: ['31', '33'], 22.0: ['19', '19'], 23.0: ['21', '21'], 24.0: ['15', '15'], 25.0: ['24', '24'], 137.0: ['31', '24'], 27.0: ['13', '13'], 28.0: ['2', '2'], 29.0: ['1', '1'], 82.0013: ['10', '13'], 138.0001: ['12', '19'], 103.0001: ['9', '2'], 102.0008: ['33', '7'], 40.0: ['2', '30'], 69.0004: ['6', '1'], 42.0: ['17', '15'], 81.0002: ['13', '5'], 45.0: ['30', '2'], 46.0: ['7', '1'], 51.0002: ['7', '29'], 51.0: ['1', '7'], 52.0: ['24', '13'], 53.0: ['3', '33'], 91.0004: ['28', '1'], 55.0: ['2', '4'], 56.0: ['15', '17'], 57.0: ['33', '29'], 58.0: ['6', '22'], 60.0: ['13', '20'], 61.0: ['24', '20'], 62.0: ['12', '5'], 63.0: ['2', '1'], 64.0: ['1', '3'], 65.0: ['2', '6'], 66.0: ['15', '1'], 67.0: ['1', '30'], 68.0: ['13', '24'], 69.0: ['15', '29'], 70.0: ['15', '33'], 71.0: ['13', '29'], 72.0: ['21', '30'], 73.0: ['15', '30'], 74.0: ['13', '33'], 75.0: ['15', '7'], 76.0: ['15', '22'], 77.0: ['21', '22'], 78.0: ['15', '2'], 79.0: ['13', '1'], 80.0: ['13', '31'], 81.0: ['13', '7'], 82.0: ['15', '28'], 83.0: ['13', '14'], 84.0: ['13', '30'], 85.0: ['13', '9'], 86.0: ['15', '9'], 87.0: ['13', '25'], 88.0: ['15', '12'], 89.0: ['15', '6'], 90.0: ['13', '3'], 91.0: ['21', '26'], 92.0: ['13', '2'], 93.0: ['13', '19'], 94.0: ['9', '13'], 95.0: ['13', '23'], 96.0: ['13', '11'], 97.0: ['13', '27'], 135.0005: ['2', '15'], 99.0: ['3', '28'], 100.0: ['15', '32'], 101.0: ['13', '10'], 102.0: ['13', '8'], 103.0: ['13', '4'], 104.0: ['13', '28'], 105.0: ['3', '6'], 106.0: ['15', '10'], 107.0: ['21', '11'], 108.0: ['13', '26'], 100.0008: ['2', '11'], 110.0: ['2', '27'], 111.0: ['15', '23'], 112.0: ['12', '7'], 113.0: ['3', '18'], 114.0: ['15', '11'], 115.0: ['9', '11'], 116.0: ['2', '24'], 117.0: ['7', '20'], 118.0: ['21', '16'], 119.0: ['15', '26'], 120.0: ['15', '24'], 121.0: ['15', '21'], 122.0: ['28', '23'], 123.0: ['3', '13'], 124.0: ['7', '24'], 125.0: ['3', '4'], 126.0: ['16', '20'], 127.0: ['13', '12'], 128.0: ['1', '24'], 129.0: ['24', '21'], 130.0: ['25', '11'], 131.0: ['12', '8'], 132.0: ['28', '12'], 133.0: ['3', '10'], 134.0: ['3', '23'], 135.0: ['13', '21'], 136.0: ['33', '27'], 89.001: ['25', '7'], 138.0: ['12', '11'], 139.0: ['3', '27'], 140.0: ['3', '20'], 100.0004: ['1', '4'], 142.0: ['9', '16'], 143.0: ['6', '15'], 144.0: ['3', '24'], 145.0: ['12', '23'], 146.0: ['1', '16'], 147.0: ['29', '24'], 148.0: ['33', '26'], 149.0: ['13', '15'], 150.0: ['33', '10'], 152.0: ['3', '21'], 77.0005: ['7', '6'], 120.0002: ['26', '16'], 157.0: ['19', '15'], 160.0: ['9', '17'], 161.0: ['1', '15'], 162.0: ['1', '17'], 163.0: ['5', '17'], 111.0001: ['15', '19'], 165.0: ['6', '17'], 80.0003: ['7', '33'], 167.0: ['12', '27'], 168.0: ['2', '17'], 77.0004: ['2', '14'], 170.0: ['3', '15'], 171.0: ['12', '16'], 80.0009: ['11', '29'], 174.0: ['33', '21'], 179.0: ['18', '15'], 80.0001: ['3', '1'], 181.0: ['21', '15'], 182.0: ['13', '17'], 79.0016: ['30', '6'], 121.0005: ['30', '26'], 187.0: ['19', '17'], 122.0005: ['22', '11'], 190.0: ['21', '17'], 89.0003: ['12', '29'], 111.0011: ['27', '21'], 82.0005: ['7', '5'], 198.0: ['25', '17'], 123.0003: ['8', '11'], 200.0: ['10', '17'], 71.0001: ['3', '29'], 206.0: ['4', '17'], 207.0: ['32', '17'], 209.0: ['24', '15'], 210.0: ['12', '15'], 148.0001: ['33', '17'], 95.0014: ['10', '28'], 57.0001: ['10', '4'], 216.0: ['23', '15'], 112.0004: ['27', '11'], 100.0019: ['30', '18'], 81.0016: ['11', '15'], 112.0002: ['29', '32'], 96.0011: ['11', '23'], 222.0: ['24', '17'], 225.0: ['12', '17'], 227.0: ['20', '17'], 115.0001: ['9', '10'], 114.0008: ['33', '32'], 130.0002: ['33', '8'], 93.0002: ['9', '30'], 240.0: ['23', '17'], 96.0017: ['8', '5'], 84.0001: ['21', '7'], 83.0008: ['11', '7'], 86.0017: ['14', '10'], 90.0018: ['16', '9'], 91.0027: ['20', '10'], 251.0: ['31', '12'], 129.0003: ['31', '23'], 85.0018: ['27', '5'], 97.0028: ['20', '18'], 85.0012: ['33', '31'], 86.0005: ['23', '9'], 138.0003: ['8', '16'], 127.0003: ['31', '13'], 128.0005: ['17', '27'], 97.001: ['26', '11'], 101.0023: ['27', '4'], 22.0001: ['8', '8'], 132.0001: ['25', '16'], 97.002: ['32', '23'], 94.0009: ['32', '19'], 89.0007: ['26', '12'], 95.0016: ['22', '26'], 96.0003: ['24', '14'], 116.0004: ['31', '6'], 104.0009: ['16', '8'], 95.0008: ['6', '3'], 99.0007: ['32', '2'], 93.0016: ['27', '10'], 98.0013: ['16', '18'], 91.0019: ['32', '14'], 119.0001: ['3', '8'], 65.0003: ['18', '31'], 23.0003: ['18', '18'], 85.0004: ['21', '27'], 97.0002: ['3', '9'], 50.0: ['4', '30'], 100.0017: ['27', '26'], 88.0001: ['21', '33'], 87.0008: ['23', '18'], 81.001: ['6', '9'], 99.0006: ['5', '18'], 66.0002: ['26', '1'], 129.0001: ['33', '23'], 89.0018: ['10', '18'], 89.0012: ['25', '30'], 23.0001: ['9', '9'], 68.0006: ['22', '31'], 97.0024: ['4', '27'], 86.0024: ['18', '32'], 87.0014: ['27', '20'], 96.0007: ['2', '12'], 96.0022: ['30', '28'], 164.0001: ['31', '11'], 25.0002: ['4', '4'], 100.0003: ['21', '8'], 120.0004: ['29', '19'], 114.0005: ['1', '20'], 66.0009: ['30', '29'], 71.0008: ['30', '33'], 102.0013: ['14', '8'], 101.002: ['8', '32'], 123.0001: ['9', '24'], 105.0005: ['12', '3'], 69.0003: ['2', '22'], 89.0004: ['1', '9'], 138.0002: ['29', '10'], 101.0002: ['3', '5'], 91.0015: ['19', '33'], 78.001: ['30', '7'], 92.0001: ['21', '10'], 91.0008: ['26', '19'], 103.0006: ['5', '32'], 70.0002: ['6', '29'], 134.0002: ['33', '11'], 93.0018: ['16', '7'], 81.0028: ['18', '13'], 93.0012: ['5', '4'], 85.0002: ['3', '22'], 94.0005: ['29', '2'], 107.0016: ['17', '2'], 72.0006: ['18', '22'], 105.001: ['23', '3'], 79.0004: ['6', '5'], 92.0011: ['4', '11'], 74.0008: ['31', '29'], 107.0019: ['17', '14'], 107.0014: ['31', '3'], 104.0003: ['26', '13'], 74.001: ['22', '33'], 97.0026: ['17', '5'], 106.0013: ['22', '19'], 127.0001: ['2', '16'], 74.0005: ['11', '18'], 73.0003: ['14', '31'], 115.0003: ['2', '26'], 93.0004: ['1', '23'], 110.0011: ['22', '20'], 105.0002: ['21', '24'], 115.0009: ['17', '12'], 90.0012: ['29', '22'], 180.0: ['32', '15'], 124.0001: ['33', '18'], 56.0001: ['27', '23'], 96.0001: ['21', '13'], 103.0011: ['22', '8'], 74.0002: ['15', '5'], 145.0001: ['29', '16'], 88.0019: ['16', '30'], 77.0017: ['18', '6'], 64.0002: ['26', '7'], 98.0005: ['26', '21'], 81.0026: ['30', '14'], 76.0006: ['27', '1'], 109.001: ['20', '11'], 119.0011: ['17', '11'], 25.0001: ['14', '14'], 105.0017: ['16', '32'], 100.0021: ['22', '23'], 81.0009: ['6', '13'], 108.0009: ['25', '20'], 67.0005: ['8', '9'], 88.0007: ['23', '10'], 108.0003: ['3', '2'], 91.0022: ['27', '18'], 29.0002: ['25', '25'], 100.0009: ['7', '32'], 77.0009: ['23', '29'], 80.0014: ['14', '18'], 16.0: ['33', '33'], 77.0003: ['2', '33'], 84.0003: ['24', '22'], 97.0004: ['24', '28'], 19.0001: ['29', '29'], 109.0002: ['1', '26'], 84.0009: ['14', '9'], 79.0007: ['5', '1'], 105.0015: ['17', '13'], 79.0013: ['14', '25'], 100.0001: ['15', '18'], 99.0008: ['10', '8'], 106.0003: ['2', '19'], 111.0006: ['6', '24'], 66.0004: ['10', '2'], 78.0002: ['1', '2'], 153.0001: ['31', '26'], 101.0018: ['10', '24'], 144.0003: ['5', '15'], 102.0005: ['23', '8'], 80.0006: ['23', '6'], 122.0006: ['18', '24'], 86.0023: ['18', '19'], 83.0021: ['18', '23'], 133.0001: ['3', '16'], 96.0006: ['28', '30'], 71.0005: ['10', '6'], 81.0025: ['27', '7'], 112.0003: ['33', '5'], 150.0001: ['30', '17'], 82.001: ['5', '2'], 116.0002: ['29', '13'], 110.0007: ['5', '27'], 106.0007: ['25', '26'], 114.0007: ['25', '12'], 84.0014: ['20', '9'], 80.0016: ['20', '1'], 81.0003: ['21', '25'], 101.0016: ['32', '3'], 86.0013: ['5', '7'], 104.0004: ['23', '28'], 140.0002: ['33', '20'], 83.0013: ['4', '25'], 83.0007: ['26', '10'], 103.0008: ['8', '6'], 115.0006: ['5', '11'], 70.0004: ['4', '5'], 161.0001: ['31', '21'], 105.0018: ['18', '21'], 143.0004: ['20', '21'], 105.0012: ['32', '4'], 73.0001: ['2', '5'], 106.0005: ['26', '15'], 115.0007: ['30', '20'], 84.0006: ['23', '2'], 96.0018: ['4', '21'], 98.0: ['2', '3'], 27.0001: ['5', '5'], 143.0002: ['5', '16'], 104.0011: ['20', '12'], 75.0005: ['4', '31'], 93.0007: ['7', '10'], 116.0003: ['29', '12'], 107.0001: ['21', '20'], 86.001: ['19', '26'], 111.0004: ['12', '28'], 106.0008: ['25', '27'], 85.0009: ['6', '23'], 88.0014: ['30', '9'], 85.0003: ['21', '12'], 105.0004: ['24', '4'], 139.0002: ['7', '16'], 117.0002: ['8', '19'], 134.0004: ['22', '21'], 87.0013: ['27', '32'], 86.002: ['17', '29'], 108.0001: ['15', '27'], 107.0008: ['5', '3'], 119.0006: ['29', '26'], 74.0004: ['7', '22'], 89.0023: ['20', '33'], 21.0: ['31', '31'], 97.0014: ['29', '9'], 81.0019: ['32', '25'], 110.0005: ['33', '14'], 88.0006: ['26', '4'], 97.0018: ['5', '28'], 100.0007: ['2', '23'], 125.0001: ['12', '13'], 91.0021: ['27', '6'], 101.0008: ['1', '10'], 108.0011: ['5', '20'], 79.0005: ['25', '22'], 120.0003: ['29', '23'], 77.0014: ['11', '30'], 76.0001: ['7', '31'], 108.0012: ['10', '11'], 97.0027: ['20', '4'], 52.0001: ['29', '33'], 77.0011: ['29', '31'], 89.0009: ['23', '19'], 91.001: ['23', '33'], 109.0005: ['14', '21'], 109.0004: ['5', '23'], 90.001: ['26', '9'], 121.0002: ['24', '11'], 79.0015: ['27', '22'], 97.0017: ['11', '20'], 86.0007: ['25', '29'], 90.002: ['20', '2'], 111.0008: ['19', '24'], 89.0016: ['11', '16'], 78.0004: ['23', '13'], 90.0002: ['15', '13'], 95.0006: ['24', '19'], 89.0015: ['11', '27'], 142.0002: ['22', '12'], 74.0003: ['21', '14'], 93.0017: ['22', '18'], 107.0005: ['1', '21'], 80.0008: ['11', '2'], 92.0006: ['32', '5'], 104.0001: ['9', '32'], 70.0006: ['30', '22'], 82.0002: ['21', '18'], 131.0006: ['30', '16'], 141.0: ['32', '21'], 82.0012: ['32', '6'], 149.0002: ['25', '21'], 77.0012: ['11', '33'], 85.0011: ['25', '1'], 77.0018: ['18', '27'], 62.0001: ['6', '30'], 93.0009: ['23', '32'], 96.0014: ['32', '8'], 93.0003: ['12', '33'], 113.0004: ['23', '12'], 119.0003: ['12', '10'], 125.0002: ['12', '32'], 83.0015: ['27', '30'], 119.0009: ['5', '24'], 95.0013: ['10', '21'], 116.0001: ['7', '11'], 115.0008: ['22', '17'], 91.0017: ['5', '25'], 127.0006: ['16', '10'], 109.0009: ['18', '28'], 101.0009: ['1', '18'], 107.0011: ['14', '12'], 76.0007: ['22', '2'], 85.0001: ['3', '25'], 84.0008: ['11', '3'], 68.0002: ['10', '30'], 142.0001: ['31', '20'], 130.0005: ['31', '18'], 123.0005: ['16', '4'], 86.0018: ['27', '9'], 182.0001: ['7', '15'], 86.0012: ['19', '30'], 88.0011: ['4', '18'], 87.0005: ['7', '14'], 97.0019: ['5', '14'], 96.0008: ['2', '32'], 113.0007: ['31', '25'], 121.0007: ['16', '11'], 97.0025: ['17', '6'], 96.0016: ['10', '19'], 97.0003: ['21', '19'], 117.0004: ['22', '15'], 20.0001: ['32', '32'], 97.0013: ['29', '3'], 87.0015: ['16', '1'], 88.0009: ['10', '20'], 81.0013: ['26', '14'], 120.0001: ['6', '12'], 119.0008: ['5', '21'], 66.0003: ['11', '6'], 86.0004: ['6', '4'], 98.0002: ['7', '12'], 81.0021: ['14', '7'], 87.0016: ['18', '33'], 169.0: ['29', '21'], 66.0007: ['4', '6'], 100.001: ['6', '32'], 81.0007: ['28', '29'], 101.0017: ['32', '18'], 89.0001: ['15', '14'], 88.0008: ['32', '20'], 105.0009: ['7', '4'], 91.0024: ['16', '15'], 67.0002: ['5', '12'], 89.0017: ['19', '23'], 90.0008: ['24', '31'], 101.0007: ['1', '19'], 89.0022: ['20', '23'], 91.0005: ['2', '13'], 69.0006: ['4', '7'], 102.001: ['10', '3'], 111.0005: ['28', '18'], 96.0013: ['11', '4'], 89.0011: ['25', '31'], 100.0016: ['14', '26'], 101.0003: ['9', '19'], 81.0017: ['11', '25'], 132.0002: ['29', '11'], 90.0013: ['33', '1'], 108.0004: ['12', '25'], 79.0008: ['5', '29'], 96.0015: ['32', '30'], 97.0009: ['7', '18'], 89.002: ['22', '13'], 77.0006: ['6', '7'], 95.0007: ['2', '18'], 70.0003: ['23', '7'], 90.0004: ['9', '6'], 102.0002: ['24', '18'], 145.0003: ['10', '15'], 110.001: ['30', '32'], 86.0002: ['9', '25'], 93.0001: ['9', '12'], 92.0008: ['8', '33'], 86.0021: ['18', '7'], 104.0006: ['33', '9'], 81.0005: ['21', '31'], 71.0002: ['1', '22'], 51.0003: ['20', '13'], 94.0012: ['16', '28'], 96.0019: ['4', '12'], 95.0005: ['24', '23'], 153.0: ['12', '24'], 139.0004: ['17', '21'], 106.001: ['8', '3'], 102.0001: ['24', '26'], 19.0004: ['16', '16'], 89.0002: ['24', '1'], 93.0011: ['5', '10'], 174.0001: ['8', '17'], 108.0014: ['31', '5'], 105.0003: ['9', '27'], 125.0004: ['23', '16'], 106.0015: ['16', '14'], 98.0009: ['17', '18'], 95.0015: ['14', '4'], 91.0012: ['11', '19'], 107.0013: ['4', '24'], 107.0007: ['29', '28'], 94.0004: ['25', '5'], 106.0002: ['9', '20'], 148.0002: ['32', '12'], 135.0006: ['8', '24'], 68.0005: ['30', '31'], 79.001: ['32', '9'], 97.0001: ['15', '4'], 130.0003: ['19', '16'], 108.0006: ['7', '28'], 75.0002: ['19', '1'], 147.0001: ['31', '16'], 118.0001: ['1', '11'], 98.0012: ['16', '17'], 90.0009: ['6', '18'], 66.0001: ['2', '29'], 99.0005: ['11', '24'], 20.0: ['26', '26'], 113.0002: ['28', '8'], 164.0: ['3', '17'], 139.0003: ['33', '4'], 112.0001: ['12', '18'], 129.0002: ['5', '26'], 97.0011: ['25', '6'], 146.0001: ['28', '21'], 166.0: ['31', '15'], 108.0016: ['27', '8'], 109.0003: ['28', '32'], 71.001: ['22', '6'], 113.0005: ['25', '18'], 62.0002: ['29', '1'], 71.0009: ['30', '5'], 101.0024: ['30', '27'], 111.0007: ['25', '19'], 77.0016: ['27', '14'], 78.0003: ['6', '33'], 98.0004: ['6', '19'], 110.0002: ['6', '21'], 101.0025: ['18', '3'], 23.0002: ['23', '23'], 80.0013: ['14', '23'], 101.0001: ['13', '18'], 91.002: ['8', '1'], 131.0005: ['27', '12'], 67.0004: ['10', '14'], 79.0002: ['21', '1'], 91.0023: ['30', '10'], 89.0019: ['8', '30'], 135.0001: ['13', '16'], 29.0001: ['28', '28'], 146.0003: ['14', '15'], 93.0006: ['28', '31'], 103.0005: ['6', '28'], 91.0016: ['19', '18'], 81.0006: ['9', '7'], 120.0005: ['11', '21'], 113.0009: ['27', '3'], 72.0005: ['22', '14'], 120.0007: ['31', '32'], 113.0003: ['6', '26'], 86.0016: ['32', '31'], 83.001: ['32', '7'], 93.001: ['5', '6'], 101.0012: ['23', '24'], 128.0001: ['28', '26'], 85.0014: ['19', '6'], 82.0003: ['1', '5'], 102.0004: ['6', '20'], 78.0009: ['10', '29'], 114.0002: ['9', '4'], 81.0008: ['2', '7'], 84.0013: ['18', '20'], 83.002: ['16', '29'], 105.0001: ['3', '32'], 104.0008: ['4', '3'], 116.0006: ['30', '24'], 71.0004: ['23', '1'], 83.0002: ['15', '31'], 134.0001: ['33', '15'], 127.0005: ['16', '24'], 81.0004: ['21', '29'], 132.0004: ['30', '12'], 85.0006: ['24', '9'], 88.0017: ['17', '1'], 145.0002: ['33', '19'], 105.0011: ['33', '28'], 81.0023: ['4', '9'], 77.0013: ['11', '31'], 76.0005: ['14', '30'], 125.0007: ['8', '10'], 82.0007: ['26', '33'], 87.001: ['10', '27'], 133.0002: ['28', '10'], 19.0003: ['17', '17'], 107.0015: ['30', '3'], 92.0009: ['8', '22'], 87.0007: ['26', '31'], 119.0007: ['29', '18'], 85.0016: ['32', '33'], 86.0003: ['7', '2'], 106.0004: ['7', '21'], 118.0002: ['26', '17'], 80.0011: ['5', '9'], 88.0013: ['27', '19'], 109.0001: ['12', '22'], 100.0011: ['6', '8'], 120.0006: ['8', '27'], 75.0004: ['4', '29'], 171.0001: ['4', '15'], 82.0004: ['28', '3'], 100.0023: ['17', '16'], 107.001: ['8', '13'], 90.0017: ['17', '30'], 78.0001: ['9', '29'], 77.0008: ['23', '25'], 89.0006: ['7', '23'], 23.0004: ['20', '20'], 79.0018: ['18', '30'], 79.0012: ['14', '13'], 80.0005: ['26', '5'], 96.001: ['23', '11'], 94.0007: ['11', '8'], 100.0022: ['22', '27'], 78.0011: ['22', '5'], 82.0015: ['18', '5'], 93.0014: ['10', '32'], 70.0001: ['28', '33'], 90.0003: ['21', '23'], 102.0012: ['8', '7'], 110.0004: ['29', '14'], 122.0002: ['29', '8'], 80.0015: ['17', '31'], 91.0003: ['12', '31'], 113.0001: ['1', '28'], 131.0003: ['32', '16'], 77.0001: ['9', '33'], 91.0002: ['24', '33'], 179.0001: ['18', '17'], 109.0: ['9', '23'], 131.0004: ['31', '8'], 82.0001: ['15', '16'], 115.0005: ['25', '24'], 86.0011: ['19', '14'], 96.0021: ['30', '13'], 83.0018: ['22', '25'], 83.0012: ['14', '5'], 85.0015: ['19', '25'], 84.0005: ['6', '11'], 94.0011: ['31', '22'], 125.0003: ['28', '4'], 100.002: ['22', '28'], 95.001: ['23', '4'], 82.0011: ['5', '31'], 152.0001: ['9', '15'], 90.0011: ['26', '28'], 94.0003: ['25', '2'], 114.0004: ['12', '4'], 143.0003: ['16', '26'], 84.0015: ['20', '30'], 87.0006: ['26', '32'], 117.0001: ['19', '21'], 132.0005: ['17', '10'], 83.0004: ['1', '6'], 95.0002: ['21', '9'], 164.0002: ['31', '17'], 81.0022: ['4', '13'], 144.0001: ['12', '21'], 86.0001: ['21', '6'], 119.0005: ['6', '16'], 100.0002: ['21', '28'], 97.0006: ['24', '30'], 71.0007: ['14', '33'], 111.0002: ['3', '14'], 86.0019: ['27', '25'], 85.0008: ['2', '25'], 87.0012: ['27', '2'], 97.0016: ['11', '26'], 129.0004: ['30', '15'], 88.0005: ['6', '27'], 127.0007: ['16', '27'], 66.0006: ['10', '22'], 99.001: ['16', '6'], 78.0012: ['20', '5'], 160.0001: ['12', '26'], 101.0014: ['19', '10'], 98.0003: ['7', '27'], 118.0004: ['22', '24'], 15.0001: ['10', '10'], 91.0026: ['18', '12'], 88.0015: ['22', '9'], 100.0013: ['19', '4'], 80.0007: ['11', '9'], 121.0001: ['3', '26'], 120.0008: ['16', '19'], 139.0001: ['24', '16'], 67.0003: ['10', '7'], 87.0004: ['24', '32'], 96.0024: ['18', '11'], 99.0002: ['1', '27'], 82.0009: ['19', '31'], 77.0007: ['26', '29'], 93.0019: ['20', '19'], 114.0006: ['28', '14'], 86.0022: ['18', '25'], 90.0001: ['13', '32'], 89.0008: ['26', '23'], 101.0006: ['1', '12'], 228.0: ['27', '17'], 95.0017: ['22', '32'], 96.0005: ['28', '5'], 91.0018: ['32', '28'], 130.0006: ['16', '21'], 92.0005: ['32', '24'], 133.0004: ['31', '27'], 103.001: ['4', '8'], 182.0002: ['25', '15'], 101.0015: ['19', '20'], 102.0009: ['19', '28'], 105.0014: ['30', '11'], 102.0003: ['1', '13'], 122.0004: ['8', '23'], 128.0004: ['17', '26'], 19.0002: ['30', '30'], 84.0007: ['23', '5'], 87.0002: ['3', '31'], 104.0007: ['19', '3'], 71.0003: ['26', '22'], 101.001: ['28', '7'], 103.0002: ['9', '18'], 88.0016: ['17', '3'], 98.0007: ['31', '1'], 94.0001: ['28', '22'], 93.0008: ['26', '27'], 105.0006: ['1', '8'], 72.0002: ['23', '31'], 95.0018: ['22', '4'], 95.0012: ['32', '27'], 90.0007: ['24', '7'], 74.0006: ['19', '7'], 111.0003: ['24', '12'], 81.0029: ['20', '7'], 81.0027: ['16', '33'], 96.0012: ['11', '10'], 65.0001: ['10', '1'], 106.0009: ['32', '11'], 88.0003: ['9', '1'], 105.0016: ['17', '7'], 91.0013: ['19', '2'], 81.0014: ['25', '14'], 97.0021: ['32', '10'], 107.002: ['16', '13'], 108.0007: ['25', '28'], 132.0003: ['8', '21'], 75.0003: ['5', '22'], 95.0004: ['9', '28'], 107.0002: ['9', '26'], 66.0008: ['30', '1'], 81.0015: ['11', '13'], 86.0015: ['32', '29'], 95.0009: ['26', '18'], 98.0001: ['7', '3'], 97.0008: ['1', '32'], 63.0001: ['20', '24'], 109.0006: ['31', '2'], 64.0004: ['4', '1'], 76.0002: ['19', '22'], 149.0001: ['12', '20'], 105.0007: ['28', '13'], 79.0017: ['17', '33'], 140.0003: ['31', '28'], 67.0001: ['23', '14'], 100.0005: ['28', '6'], 138.0005: ['20', '16'], 78.0006: ['29', '30'], 111.001: ['14', '19'], 74.0009: ['22', '7'], 131.0002: ['29', '17'], 98.0011: ['16', '5'], 110.0009: ['30', '19'], 69.0005: ['6', '2'], 81.0018: ['19', '13'], 110.0003: ['25', '8'], 80.001: ['19', '5'], 106.0012: ['31', '9'], 100.0015: ['14', '3'], 65.0002: ['22', '30'], 79.0009: ['5', '33'], 82.0014: ['14', '6'], 79.0003: ['7', '30'], 99.0004: ['25', '23'], 96.0023: ['17', '9'], 209.0001: ['7', '17'], 90.0006: ['9', '31'], 101.0011: ['7', '13'], 113.0006: ['19', '12'], 68.0004: ['30', '4'], 80.0002: ['21', '2'], 157.0001: ['8', '15'], 83.0017: ['22', '3'], 130.0004: ['14', '16'], 104.0005: ['25', '3'], 82.0006: ['6', '10'], 81.0001: ['13', '6'], 97.0022: ['8', '25'], 102.0011: ['8', '28'], 97.0023: ['4', '19'], 84.001: ['27', '29'], 101.0022: ['27', '24'], 83.0009: ['11', '14'], 86.0014: ['32', '1'], 82.0016: ['20', '6'], 83.0003: ['21', '5'], 103.0004: ['2', '8'], 115.0002: ['28', '20'], 97.0015: ['29', '5'], 85.0013: ['19', '9'], 106.0001: ['15', '8'], 105.0008: ['7', '26'], 12.0001: ['27', '27'], 104.0002: ['7', '8'], 72.0004: ['27', '31'], 74.0007: ['4', '14'], 92.0013: ['18', '9'], 107.0018: ['17', '8'], 107.0012: ['14', '28'], 101.0021: ['8', '14'], 75.0001: ['11', '22'], 108.0005: ['28', '2'], 86.0006: ['23', '20'], 119.001: ['8', '4'], 135.0002: ['3', '11'], 81.002: ['10', '33'], 89.0021: ['17', '25'], 125.0005: ['29', '15'], 106.0011: ['14', '32'], 118.0003: ['33', '2'], 88.001: ['4', '33'], 94.001: ['8', '31'], 108.0015: ['31', '14'], 87.0009: ['19', '27'], 90.0014: ['19', '32'], 78.0005: ['23', '30'], 87.0003: ['24', '25'], 107.0004: ['24', '8'], 119.0002: ['12', '6'], 119.0004: ['28', '19'], 77.0015: ['14', '2'], 86.0009: ['11', '28'], 138.0004: ['27', '16'], 110.0008: ['32', '26'], 110.0001: ['7', '19'], 109.0008: ['16', '23'], 121.0006: ['17', '23'], 76.0004: ['14', '1'], 94.0008: ['33', '30'], 81.003: ['20', '29'], 74.0011: ['20', '22'], 136.0001: ['31', '10'], 111.0012: ['27', '28'], 84.0002: ['24', '5'], 79.0001: ['15', '3'], 78.0008: ['10', '25'], 85.001: ['26', '6'], 90.0005: ['9', '14'], 51.0001: ['1', '33'], 80.0012: ['10', '23'], 83.0006: ['26', '2'], 72.0001: ['6', '14'], 122.0003: ['10', '16'], 92.001: ['14', '27'], 92.0003: ['12', '9'], 79.0011: ['10', '9'], 91.0009: ['23', '26'], 149.0003: ['8', '12'], 90.0016: ['22', '10'], 194.0: ['20', '15'], 74.0001: ['13', '22'], 123.0002: ['28', '24'], 93.0013: ['10', '26'], 114.0001: ['3', '12'], 113.0008: ['31', '19'], 125.0006: ['33', '13'], 80.0004: ['6', '25'], 83.0019: ['17', '22'], 92.0002: ['9', '3'], 91.0011: ['25', '9'], 80.0017: ['20', '27'], 55.0001: ['23', '27'], 83.0001: ['15', '25'], 116.0005: ['30', '21'], 174.0002: ['14', '17'], 94.0006: ['29', '25'], 82.0017: ['20', '25'], 135.0004: ['28', '15'], 84.0012: ['18', '2'], 89.0014: ['11', '32'], 85.0005: ['9', '5'], 85.0017: ['32', '22'], 135.0003: ['3', '19'], 102.0015: ['20', '28'], 89.0013: ['11', '12'], 108.0008: ['25', '4'], 83.0011: ['10', '31'], 81.0012: ['26', '25'], 108.0013: ['14', '11'], 98.0014: ['18', '8'], 95.0003: ['21', '4'], 103.0012: ['18', '10'], 115.0004: ['26', '20'], 81.0011: ['26', '3'], 127.0002: ['29', '4'], 70.0008: ['18', '14'], 130.0001: ['29', '20'], 96.002: ['4', '28'], 97.0007: ['12', '2'], 64.0003: ['33', '3'], 77.0019: ['20', '14'], 84.0004: ['7', '9'], 96.0002: ['21', '3'], 82.0008: ['26', '30'], 87.0001: ['3', '7'], 86.0008: ['25', '33'], 101.0019: ['10', '12'], 98.0006: ['26', '8'], 102.0007: ['29', '6'], 124.0002: ['18', '16'], 88.0018: ['16', '3'], 88.0012: ['4', '20'], 94.0002: ['25', '13'], 89.0005: ['1', '25'], 100.0014: ['5', '19'], 67.0006: ['22', '29'], 110.0012: ['20', '26'], 87.0011: ['4', '23'], 99.0009: ['22', '16'], 102.0014: ['4', '32'], 99.0003: ['2', '21'], 89.0024: ['20', '32'], 28.0001: ['6', '6'], 69.0001: ['1', '31'], 101.0013: ['33', '25'], 91.0007: ['7', '25'], 83.0022: ['18', '29'], 122.0001: ['28', '11'], 68.0003: ['14', '22'], 79.0014: ['27', '13'], 88.0004: ['28', '9'], 97.0005: ['24', '27'], 109.0007: ['31', '7'], 146.0002: ['33', '12'], 83.0016: ['30', '25'], 132.0006: ['17', '4'], 91.0001: ['24', '6'], 127.0004: ['17', '24'], 102.0006: ['25', '10'], 103.0007: ['8', '2'], 144.0002: ['33', '24'], 69.0002: ['2', '10'], 90.0015: ['5', '13'], 117.0003: ['30', '8'], 92.0012: ['27', '33'], 93.0005: ['28', '25'], 71.0006: ['14', '29'], 104.001: ['18', '26'], 118.0005: ['17', '20'], 88.0002: ['21', '32'], 103.0009: ['8', '18'], 106.0014: ['16', '12'], 102.0016: ['20', '8'], 103.0003: ['24', '3'], 123.0004: ['17', '19'], 121.0003: ['8', '26'], 91.0006: ['2', '9'], 93.0015: ['14', '20'], 105.0013: ['4', '26'], 121.0004: ['8', '20'], 83.0005: ['1', '14'], 72.0003: ['5', '30'], 91.0014: ['19', '29'], 92.0004: ['11', '17'], 201.0: ['27', '15'], 101.0004: ['9', '8'], 78.0007: ['11', '1'], 107.0017: ['17', '32'], 95.0001: ['3', '30'], 140.0001: ['9', '21'], 106.0006: ['26', '24'], 73.0002: ['29', '7'], 143.0001: ['33', '16'], 70.0007: ['22', '1'], 97.0012: ['25', '32'], 134.0003: ['31', '4'], 64.0001: ['2', '31'], 46.0001: ['4', '2'], 81.0024: ['31', '30'], 75.0006: ['18', '1'], 108.001: ['33', '6'], 152.0002: ['28', '17'], 98.001: ['16', '2'], 114.0003: ['12', '14'], 95.0011: ['33', '22'], 107.0009: ['5', '8'], 66.0005: ['10', '5'], 106.0016: ['20', '3'], 107.0003: ['24', '10'], 77.001: ['23', '22'], 85.0007: ['12', '30'], 96.0009: ['23', '21'], 133.0003: ['28', '16'], 128.0003: ['4', '16'], 76.0003: ['32', '13'], 53.0001: ['1', '29'], 96.0004: ['12', '1'], 108.0002: ['15', '20'], 90.0019: ['16', '31'], 128.0002: ['28', '27'], 77.002: ['20', '31'], 99.0001: ['24', '29'], 98.0008: ['17', '28'], 110.0006: ['19', '11'], 77.0002: ['9', '22'], 55.0002: ['4', '10'], 100.0006: ['2', '28'], 84.0011: ['16', '22'], 100.0018: ['30', '23'], 100.0012: ['19', '8'], 68.0001: ['6', '31'], 101.0005: ['24', '2'], 79.0006: ['11', '5'], 91.0025: ['16', '25']}	
	###############	preparo e creo db di training
	dir_base_fr="/Users/labcontenuti/Documents/FaceRecognition/resource"

	dir_image="/att_faces4/"
	db=DBManager(dir_base_fr,training,"/att_faces4")
	#db.prepare()

	############### creato db training	

	"""  """  
	print "creo db immagini"
	try:
		print "start make db "
		App(video_src, dataset_fn).make_db(video_info,  db_image)
	except  Exception as er:
		print " error - run crop",  er


	######## FINE CREO IL DB DI IMMAGINI
	######################################
	print "OK-- creato db immagini"



	###############	preparo e creo db di training

	db.make_training_db()
	db.ceck_db()

	############### creato db training

	risultato_atteso=[1, 2,5, 8, 13, 14, 15, 19, 23,  25, 28, 32]
	print "start multi image recognition"
	#base_directory="/home/felix/Pictures/att_faces3/"
	base_directory=db_image
	training_directory= dir_base_fr+ training#+"/training/"

	labels={}
	out_dir = None
	all_dir= os.listdir(base_directory)
	print all_dir
	all_prediction={}
#    ## CERCO DELLE SOGlie
#    for img_dir in all_dir:
#                 other_dir=all_dir
#                 [X,y] = read_images(   training_directory+img_dir, (92,112))
#                 #[X,y] = read_images(   training_directory+"/1/", (92,112))
#                 model = cv2.createLBPHFaceRecognizer()
#                 model.train(np.asarray(X), np.asarray(y)) 
#                 o_dir=img_dir   
#   
#                 all_image = os.listdir(base_directory+o_dir+"/s"+o_dir)
#                 media=0
#                 vec_media=[]
#                 for img_name in all_image:
#                                [X2,y2] = read_1_image(base_directory+o_dir+"/s"+o_dir+"/"+img_name, (92,112)) 
#                                [p_label2, p_confidence2] = model.predict(np.asarray(X2[0]))
#                                #print  "image ",  labels[p_label2], " confidence ",str(p_confidence2) 
#                                #print base_directory+o_dir+"/s"+o_dir+"/"+img_name,  "   === confidece ==>>",  p_confidence2
#                                if p_confidence2 > 50:
#                                        print base_directory+o_dir+"/s"+o_dir+"/"+img_name,  "   === confidece ==>>",  p_confidence2
#                                        os.remove(base_directory+o_dir+"/s"+o_dir+"/"+img_name)
#                                #media=media+int(p_confidence2)
#                                vec_media.append(int(p_confidence2))
#                                
#                 vec_media=vec_media[int( 0.1*len(vec_media)) : int( 0.9*len(vec_media))]               
#                 for i  in range(len(vec_media)):
#                   media =media+vec_media[i] 
#                 media =media /len(vec_media)
#                 trovato =0
#                 step=0.0001
#                 while not trovato <0:
#                    if all_prediction.has_key(media+trovato*step):
#                        trovato=trovato+1
#                    else:
#                       all_prediction[media+trovato*step]=[img_dir, o_dir]    
#                       trovato=-1
#                 trovato=0       
#    _key= all_prediction.keys()
#    _key.sort()
#    for k in _key:
#        print k,  "   ",  all_prediction[k]
#    print "===== ok ripulito ===="
#    exit()
#    
#    
	all_prediction={}
	faces={}
	for i in range(len(all_dir)):
		faces[i+1]=i+1
	print faces

	soglia=80
	while soglia<81:
		print "====================================================="
		print "============",  soglia ,   "===========================" 
		for img_dir in all_dir:
			#print "img_dir ",  img_dir
			other_dir=all_dir
			#other_dir.remove(img_dir)   
			[X,y] = read_images(   training_directory+"/"+img_dir, (92,112))
			#[X,y] = read_images(   training_directory+"/1/", (92,112))
			model = cv2.createLBPHFaceRecognizer()
			model.train(np.asarray(X), np.asarray(y))            
			print "============== ",  img_dir,  "============="
			for o_dir in other_dir:     
				print "--------------- ",  o_dir,  "------------"
				all_image = os.listdir(base_directory+o_dir+"/s"+o_dir)
				media=0
				vec_media=[]
				for img_name in all_image:
					[X2,y2] = read_1_image(base_directory+o_dir+"/s"+o_dir+"/"+img_name, (92,112)) 
					[p_label2, p_confidence2] = model.predict(np.asarray(X2[0]))
					#print  "image ",  labels[p_label2], " confidence ",str(p_confidence2) 
					#media=media+int(p_confidence2)
					vec_media.append(int(p_confidence2))
				vec_media.sort()                
				#vec_media=vec_media[int( 0.1*len(vec_media)) : int( 0.9*len(vec_media))]
				vec_media=vec_media[:1+int( 0.2*len(vec_media)) ]    
				#print vec_media
				for i  in range(len(vec_media)):
					media =media+vec_media[i] 
				media =media /len(vec_media)
				trovato =0
				step=0.0001
				while not trovato <0:
					if all_prediction.has_key(media+trovato*step):
						trovato=trovato+1
					else:
						all_prediction[media+trovato*step]=[img_dir, o_dir]    
						trovato=-1
				trovato=0       
		print "all prediction"		
		print all_prediction
		#print faces
		soglia =soglia+10
		tir=Tiresia()
		tir.run(all_prediction,len(video_info._track_list ))
		for t in tir.republic.all_track.iteritems():
			t[1]._start=  video_info._track_list[int(t[0])-1]._frame_start
			t[1]._stop=  video_info._track_list[int(t[0])-1]._frame_stop
			tir.republic.all_track[t[0]]=t[1]
		rec_xml=dir_demo_base+"Data/"+"RecfaceList"+str(sys.argv[1])+".xml"		
		print "\n SALVO XML FILE ", video_info, " ", rec_xml
		tir.save_as_xml_ale(video_info, rec_xml)	


	print "========FINE======================"